// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_rubbish/entity/garbage_entity.dart';
import 'package:flutter_rubbish/generated/json/garbage_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case GarbageEntity:
				return garbageEntityFromJson(data as GarbageEntity, json) as T;
			case GarbageData:
				return garbageDataFromJson(data as GarbageData, json) as T;
			case GarbageDataItems:
				return garbageDataItemsFromJson(data as GarbageDataItems, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case GarbageEntity:
				return garbageEntityToJson(data as GarbageEntity);
			case GarbageData:
				return garbageDataToJson(data as GarbageData);
			case GarbageDataItems:
				return garbageDataItemsToJson(data as GarbageDataItems);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (GarbageEntity).toString()){
			return GarbageEntity().fromJson(json);
		}
		if(type == (GarbageData).toString()){
			return GarbageData().fromJson(json);
		}
		if(type == (GarbageDataItems).toString()){
			return GarbageDataItems().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<GarbageEntity>[] is M){
			return data.map<GarbageEntity>((e) => GarbageEntity().fromJson(e)).toList() as M;
		}
		if(<GarbageData>[] is M){
			return data.map<GarbageData>((e) => GarbageData().fromJson(e)).toList() as M;
		}
		if(<GarbageDataItems>[] is M){
			return data.map<GarbageDataItems>((e) => GarbageDataItems().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}